import requests
import bs4

from config import token, url

try:
    from config import use_short_names
except:
    print("âš  Please set use_short_names in your config.py")
    use_short_names = False
try:
    from config import only_show_yes
except:
    print("âš  Please set only_show_yes in your config.py")
    only_show_yes = False
## DEFINE STATIC URLS FOR API

get_libaries = "{base}/library/sections?X-Plex-Token={token}&X-Plex-Language=en".format(token=token, base=url)
get_movies_url = "{base}/library/sections/{section_id}/all?X-Plex-Token={token}&X-Plex-Language=en"
write_description = "{base}/library/sections/{section_id}/all?type=1&id={id}&includeExternalMedia=1&summary.value={description}&X-Plex-Product=Plex%20Web&X-Plex-Version=3.99.2&X-Plex-Client-Identifier=7st8h2qhsuhd44mw2y8uanrs&X-Plex-Platform=Chrome&X-Plex-Platform-Version=76.0&X-Plex-Sync-Version=2&X-Plex-Model=hosted&X-Plex-Device=Windows&X-Plex-Device-Name=Chrome&X-Plex-Device-Screen-Resolution=1368x776%2C1368x912&X-Plex-Token={token}&X-Plex-Language=en"
def get_movie_libraries():
    # This gets all libraries which have movies in
    a = requests.get(get_libaries)
    soup = bs4.BeautifulSoup(a.text, 'lxml')

    return soup.find_all('directory', attrs={"type" : "movie"}), a.status_code

def get_movies(section_id):
    print("Requesting movies from {}".format(section_id))
    a = requests.get(get_movies_url.format(token=token, base=url, section_id=section_id))
    soup = bs4.BeautifulSoup(a.text, 'lxml')
    return soup.find_all('video'), a.status_code

def get_movies_and_format():
    movies = []
    for library in get_movie_libraries()[0]:
        for movie in get_movies(library['key'])[0]:
            if "doesthedogdie:" in movie['summary']:
                has_tag = True
            else:
                has_tag = False
            
            movies.append(dict(library=library['key'], key=movie['key'], title=movie['title'], desc=movie['summary'], has_tag = has_tag))
    return movies


def write_data(movie):
    # the value movie should be structured like one generated by build_json.py

    desc_cut = movie['desc'].split("\r\n\r\ndoesthedogdie: \r\n\r\n")[0]
    statuses = []
    if len(movie['statuses']) == 0:
        ddtd_status = "No content warnings could be retrieved for this film\nThis means either this film is fine, or it isn't present on DTDD"
    else:
        for status in movie['statuses']:
            if not(only_show_yes) or status[1] == "Yes":
                if use_short_names:
                    statuses.append(status[2])
                else:
                    statuses.append(status[0])
        statuses.sort()
        if use_short_names:
            ddtd_status = "This may contain: {}".format(', '.join(statuses))
        else:
            ddtd_status = '\r\n'.join(statuses)
    movie['desc'] = "{}\r\n\r\ndoesthedogdie: \r\n\r\n{}".format(desc_cut, ddtd_status)
    
    movie['id']=movie['key'].strip('/library/metadata/')
    target = write_description.format(section_id=movie['library'], id=movie['id'], base=url, token=token, description=movie['desc'])
    requests.put(target)

if __name__ == "__main__":
    # for testing only
    # show all movie libraries

    print("ðŸŽ¬ Film library IDs")
    for library in get_movie_libraries()[0]:
        print(library['key'])